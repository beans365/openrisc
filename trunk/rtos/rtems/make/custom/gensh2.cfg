#
#  gensh2.cfg
#
#  default configuration for Hitachi sh1 processors
#
#  Authors: Ralf Corsepius (corsepiu@faw.uni-ulm.de)
#
#  $Id: gensh2.cfg,v 1.2 2001-09-27 12:02:52 chris Exp $
#

HZ:=29491200

include $(RTEMS_ROOT)/make/custom/default.cfg

RTEMS_CPU=sh
RTEMS_CPU_MODEL=sh7045

# This is the actual bsp directory used during the build process.
RTEMS_BSP_FAMILY=gensh2

# BSP specific preprocessor flags.
# These should only be used in BSP dependent directories.
BSP_CPPFLAGS=-DHZ=$(HZ)

#
#  This contains the compiler options necessary to select the CPU model
#  and (hopefully) optimize for it.
#
CPU_CFLAGS= -m2

# debug flags: opt. is needed to fit in RAM. '-O1' has shown bad side-
# effects by failing to set up some hardware I/O registers in
# c/src/lib/libbsp/sh/gensh2/startup/hw_init.c (and perhaps elsewhere),
# which prevented proper chip initialization and muted SCI1 output.
# CFLAGS_DEBUG_V = -O4 --save-temps
CFLAGS_DEBUG_V = -O4 -g

# optimize flag: typically -0, could use -O4 or -fast
# -O4 is ok for RTEMS
CFLAGS_OPTIMIZE_V = -O4 

#  This section makes the target dependent options file.

#  NDEBUG (C library)
#     if defined asserts do not generate code.  This is commonly used
#     as a command line option.
#
#  RTEMS_TEST_NO_PAUSE (RTEMS tests)
#     do not pause between screens of output in the rtems tests
#
#  RTEMS_DEBUG (RTEMS)
#     If defined, debug checks in RTEMS and support library code are enabled.
#
#  STANDALONE_EVB
#     This switch compiles code to jump-start from FLASH, without a monitor
#
#  START_HW_INIT
#     This switch selects whether 'early_hw_init()' is called from
#     'start.S'; 'bsp_hw_init()' is always called from 'bspstart.c'
#

define make-target-options
	@echo "/* #define NDEBUG 1 */ "                     >>$@
	@echo "#define RTEMS_TEST_NO_PAUSE 1"               >>$@
	@echo "#define RTEMS_TEST_IO_STREAM 1"              >>$@
	@echo "/* #define STANDALONE_EVB 1 */"              >>$@
	@echo "#define START_HW_INIT 1"                     >>$@
	@echo "/* #define RTEMS_DEBUG  1 */"                >>$@
endef


# The following are definitions of make-exe which will work using ld as
# is currently required.  It is expected that as of gcc 2.8, the end user
# will be able to override parts of the compilers specs and link using gcc.

ifeq ($(RTEMS_USE_GCC272),yes)
define make-exe
	$(LD) $(LDFLAGS) -N -e _start \
	    -T$(PROJECT_RELEASE)/lib/linkcmds\
	    -o $(basename $@).exe \
	    $(START_FILE) $(LINK_OBJS) --start-group $(LINK_LIBS) --end-group
	$(NM) -n $(basename $@).exe > $(basename $@).num
	$(SIZE) $(basename $@).exe
endef
else
define make-exe
	$(LINK.c) $(AM_CFLAGS) $(AM_LDFLAGS) -Wl,-Map,$(basename $@).map \
	    $(LDLIBS) -o $@ \
	    $(LINK_OBJS) $(LINK_LIBS) -lstdc++
	$(NM) -n $@ > $(basename $@).num
	$(SIZE) $@
endef
endif

# Miscellaneous additions go here
