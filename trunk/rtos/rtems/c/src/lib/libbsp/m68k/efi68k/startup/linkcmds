/*  linkcmds
 *
 *  $Id: linkcmds,v 1.2 2001-09-27 12:00:03 chris Exp $
 */

OUTPUT_ARCH(m68k)
__DYNAMIC  =  0;

/*
 * The memory map looks like this:
 * +--------------------+ <- low memory
 * | .text              |
 * |        etext       |
 * |        ctor list   | the ctor and dtor lists are for
 * |        dtor list   | C++ support
 * |        _endtext    |
 * +--------------------+
 * | .data              | initialized data goes here
 * |        _sdata      |
 * |        _edata      |
 * +--------------------+
 * | .bss               |
 * |        _clear_start| start of bss, cleared by crt0
 * |        _end        | start of heap, used by sbrk()
 * +--------------------+
 * |    heap space      |
 * |        _ENDHEAP    |
 * |    stack space     | 
 * |        __stack     | top of stack
 * +--------------------+ <- high memory
 */


/*
 * User modifiable values:
 *
 * _VBR                 location of VBR table
 */

MEMORY
{
  ram     : ORIGIN = 0x203000, LENGTH = 256K
}

_VBR = 0x200000;		/* location of the VBR table (in RAM) */
__end_of_ram = 0x240000;
_copy_data_from_rom = 0;

/*
 * Declare some sizes.
 */
_RamBase = DEFINED(_RamBase) ? _RamBase : 0x200000;
_RamSize = DEFINED(_RamSize) ? _RamSize : 256K;
_HeapSize = DEFINED(_HeapSize) ? _HeapSize : 0x10000;
_StackSize = DEFINED(_StackSize) ? _StackSize : 0x1000;

/*
 * stick everything in ram (of course)
 */

SECTIONS
{
	ram : {
		. = .;
	} >ram

        /*
         * Text, data and bss segments
         */
        .text : {
                *(.text)

		/*
		 * C++ constructors/destructors
		 */
		*(.gnu.linkonce.t.*)

		/*
		 * Initialization and finalization code.
     		 *
     		 * Various files can provide initialization and finalization
		 * functions.  crtbegin.o and crtend.o are two instances. The
		 * body of these functions are in .init and .fini sections. We
		 * accumulate the bodies here, and prepend function prologues
		 * from crti.o and function epilogues from crtn.o. crti.o must
		 * be linked first; crtn.o must be linked last.  Because these
		 * are wildcards, it doesn't matter if the user does not
		 * actually link against crti.o and crtn.o; the linker won't
		 * look for a file to match a wildcard.  The wildcard also
		 * means that it doesn't matter which directory crti.o and
		 * crtn.o are in. 
		 */
		PROVIDE (_init = .);
		*crti.o(.init)
		*(.init)
		*crtn.o(.init)
		PROVIDE (_fini = .);
		*crti.o(.fini)
		*(.fini)
		*crtn.o(.fini)

		/*
		 * C++ constructors/destructors
     		 *
     		 * gcc uses crtbegin.o to find the start of the constructors
		 * and destructors so we make sure it is first.  Because this
		 * is a wildcard, it doesn't matter if the user does not
		 * actually link against crtbegin.o; the linker won't look for
		 * a file to match a wildcard.  The wildcard also means that
		 * it doesn't matter which directory crtbegin.o is in. The
		 * constructor and destructor list are terminated in
		 * crtend.o.  The same comments apply to it.
		 */
		. = ALIGN (16);
		*crtbegin.o(.ctors)
		*(.ctors)
		*crtend.o(.ctors)
		*crtbegin.o(.dtors)
		*(.dtors)
		*crtend.o(.dtors)

		/*
		 * Exception frame info
		 */
		. = ALIGN (16);
		*(.eh_frame)

		/*
		 * Read-only data
		 */
		. = ALIGN (16);
		_rodata_start = . ;
		*(.rodata)
		*(.gnu.linkonce.r*)

                 . = ALIGN (16);
                PROVIDE (_etext = .);
        } >ram
        .data : {
                PROVIDE (_copy_start = .);
                *(.data)
		*(.gnu.linkonce.d*)
		*(.gcc_except_table)
                . = ALIGN (16);
                PROVIDE (_edata = .);
                PROVIDE (_copy_end = .);
        } >ram
        .bss : {
                _clear_start = .;
                *(.bss)
                *(COMMON)
                . = ALIGN (16);
                PROVIDE (end = .);

                . += _StackSize;
                . = ALIGN (16);
                _stack_init = .;
                _clear_end = .;

                _WorkspaceBase = .;
        } >ram
}
