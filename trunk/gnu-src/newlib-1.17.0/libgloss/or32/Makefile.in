# Makefile.in. Autoconf input makefile.

# Copyright (C) 2004, Jacob Bower
# Copyright (C) 2010, Embecosm Limited <info@embecosm.com>

# Contributor Jeremy Bennett <jeremy.bennett@embecosm.com>

# This file is part of Newlib.

# The original work by Jacob Bower is provided as-is without any kind of
# warranty. Use it at your own risk!

# All subsequent work is bound by version 3 of the GPL as follows.

# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 3 of the License, or (at your option)
# any later version.

# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.

# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http:#www.gnu.org/licenses/>.

DESTDIR =
VPATH = @srcdir@ @srcdir@/..
srcdir = @srcdir@
objdir = .
srcroot = $(srcdir)/../..
objroot = $(objdir)/../..

prefix = @prefix@
exec_prefix = @exec_prefix@

host_alias = @host_alias@
target_alias = @target_alias@

bindir = @bindir@
libdir = @libdir@
tooldir = $(exec_prefix)/$(target_alias)

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@

# Multilib support variables.
# TOP is used instead of MULTI{BUILD,SRC}TOP.
MULTIDIRS =
MULTISUBDIR =

SHELL =	/bin/sh

CC = @CC@

AS = @AS@
AR = @AR@
LD = @LD@
RANLIB = @RANLIB@

OBJDUMP = `if [ -f ${objroot}/../binutils/objdump ] ; \
	then echo ${objroot}/../binutils/objdump ; \
	else t='$(program_transform_name)'; echo objdump | sed -e $$t ; fi`
OBJCOPY = `if [ -f ${objroot}/../binutils/objcopy ] ; \
	then echo ${objroot}/../binutils/objcopy ; \
	else t='$(program_transform_name)'; echo objcopy | sed -e $$t ; fi`

OBJS		= putnum.o unlink.o
CFLAGS		= -g

BSP = libor32.a libor32uart.a

CRT0      = crt0.o
OR32_OBJS = _exit.o      \
            close.o      \
            environ.o    \
            execve.o     \
            fork.o       \
            fstat.o      \
            getpid.o     \
            isatty.o     \
            kill.o       \
            link.o       \
            lseek.o      \
            open.o       \
            read.o       \
            sbrk.o       \
            stat.o       \
            times.o      \
	    uart-dummy.o \
            unlink.o     \
            wait.o       \
            write.o
UART_OBJS = _exit.o       \
            close-uart.o  \
            environ.o     \
            execve.o      \
            fork.o        \
            fstat-uart.o  \
            getpid.o      \
            isatty-uart.o \
            kill.o        \
            link.o        \
            lseek-uart.o  \
            open.o        \
            read-uart.o   \
            sbrk.o        \
            stat.o        \
            times.o       \
	    uart.o        \
            unlink.o      \
            wait.o        \
            write-uart.o

# Host specific makefile fragment comes in here.
@host_makefile_frag@

#
# build a test program for each target board. Just trying to get
# it to link is a good test, so we ignore all the errors for now.
#
all: ${CRT0} ${BSP}

#
# here's where we build the board support packages for each target
#
libor32.a: $(OR32_OBJS)
	${AR} ${ARFLAGS} $@ $(OR32_OBJS)
	${RANLIB} $@

libor32uart.a: $(UART_OBJS)
	${AR} ${ARFLAGS} $@ $(UART_OBJS)
	${RANLIB} $@

crt0.o: crt0.S
	$(CC) -c $(CFLAGS)  $(<) -o $@


clean mostlyclean:
	rm -f a.out core *.i *.o *-test *.srec *.dis *.x $(SIM_BSP) $(MON_BSP)

distclean maintainer-clean realclean: clean
	rm -f Makefile config.status *~

.PHONY: install info install-info clean-info
install:
	$(INSTALL_PROGRAM) $(CRT0) \
		$(DESTDIR)$(tooldir)/lib${MULTISUBDIR}/$(CRT0)
	@for bsp in ${BSP}; do\
	    $(INSTALL_PROGRAM) $${bsp} $(DESTDIR)$(tooldir)/lib${MULTISUBDIR}; \
	done

info:
install-info:
clean-info:


Makefile: Makefile.in config.status @host_makefile_frag_path@
	$(SHELL) config.status

config.status: configure
	$(SHELL) config.status --recheck
